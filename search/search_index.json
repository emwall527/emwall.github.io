{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Embedded Systems Design Project II","text":"","tags":["tag1","tag2"]},{"location":"#team-stuff","title":"Team Stuff","text":"<p>Team Website</p> <p>Hello Welcome to my page! My work will be updated periodically as I complete it below.</p>","tags":["tag1","tag2"]},{"location":"#individual-assignments","title":"Individual Assignments","text":"<p>Block Diagram</p> <p>Component Selection</p> <p>Schematic and PCB</p> <p>BOM/Power Budget</p> <p>API</p> <p>Final Report</p> <p>Pic Table</p>","tags":["tag1","tag2"]},{"location":"API/","title":"API","text":""},{"location":"API/#message-type","title":"Message Type","text":"<p>We use different types of messages that need to be sent using this standard. Thanks to the header and footer setup, the messages can be different sizes. All messages are also picked up by the Wi-Fi system so the operator can see them live on the web interface. The web interface can also send fake messages to replace commands from the user.</p> <p>Each subsystem address is laid out below (Last Edited: 5/5/2025)</p> Member Subsystem Address Adam Quan Human Interface 0x08 Emerson Wall Windspeed Display 0x09 All All Subsystems 0x10"},{"location":"API/#example-key-last-edited-552025","title":"Example Key: (Last Edited: 5/5/2025)","text":"<p>BLUE: All common message components (i.e., Headers/Footers) RED: The local address for my subsystem GREEN: The address for all devices  </p> <p>Including headers and footers isn\u2019t required for the assignment, but they\u2019ll help me and my team during production by giving us better reference information. So, they will stay in this document. The messages don\u2019t need data type declarations. Since the data values don\u2019t overlap, the receiver can figure out what the message means by checking who sent it and who it's meant for (either a specific device or all devices).</p> TX/RX Message Name Data Type Range Size Description Example TX Ready to Receive uint_8 [253] 8 Bits [56 Bits Total] Notifies subsystems that ready commands can be received [0x41][0x5a] [0x08] [0x10] [0xF3]  [0x59][0x42] TX Initialize Clock uint_8 [255] 8 Bits [56 Bits Total] Tells all devices to start their send clock [0x41][0x5a] [0x08] [0x10] [0xF5]  [0x59][0x42] TX Emergency Stop uint_8 [244] 8 Bits [56 Bits Total] Commands all devices to cease operation [0x41][0x5a] [0x08] [0x10] [0xF4]  [0x59][0x42] RX No Report uint_8 [0] 8 Bits [56 Bits Total] Indicates to master device that no new information is available [0x41][0x5a]  [0x09] [0x08] [0x43]  [0x59][0x42] RX True Airspeed uint_8 [0\u2013255] 8 Bits [56 Bits Total] Airspeed reporting from Windspeed subsystem [0x41][0x5a]  [0x09] [0x10] [0x43]  [0x59][0x42] RX Airspeed Target uint_8 [0\u2013100] 8 Bits [56 Bits Total] Airspeed dial target (Reported to web interface) [0x41][0x5a]  [0x08] [0x10] [0x44]  [0x59][0x42] RX Pitch Target uint_8 [101\u2013201] 8 Bits [56 Bits Total] Pitch dial target [0x41][0x5a]  [0x08] [0x10] [0x67]  [0x59][0x42] RX Current Fan Speed uint_8 [0\u2013100] 8 Bits [56 Bits Total] Current Fan Speed (Reported to web interface) [0x41][0x5a]  [0x09] [0x10] [0x2B]  [0x59][0x42] <p>Made: 3/22/2025</p> <p>Back to Home</p>"},{"location":"BOM-%26-Power-Budget/","title":"Bill of Materials &amp; Power Budget","text":""},{"location":"BOM-%26-Power-Budget/#bill-of-materials-last-edited-552025","title":"Bill of Materials (Last Edited: 5/5/2025)","text":""},{"location":"BOM-%26-Power-Budget/#description","title":"Description","text":"<p>The bill of materials lists all components across documents, including their quantity, model number, and manufacturer. It will be updated as final part selections are made. For certain components, such as resistors, bulk ordering will be used to simplify procurement and reduce the need for individual orders. To ensure seamless integration, all resistors will be kept at a consistent size regardless of the final selection.</p> <p></p>"},{"location":"BOM-%26-Power-Budget/#power-budget-last-edited-2252025","title":"Power Budget (Last Edited: 2/25/2025)","text":""},{"location":"BOM-%26-Power-Budget/#description_1","title":"Description","text":"<p>To ensure sufficient power delivery for all required hardware, I have generated this power budget to illustrate the power allocation necessary to operate key components. The primary power draw comes from the Vybronics DC motor when in motion, while the PIC18F27/47Q10 and SunLED contribute minor consumption.</p> <p></p>"},{"location":"BOM-%26-Power-Budget/#how-the-power-budget-was-used","title":"How the Power Budget was used","text":"<p>The Power Budget table helps estimate the system\u2019s power needs by detailing the minimum and maximum power consumption for each component. The PIC18F47Q10 microcontroller draws 10mA in active mode, serving as the central control unit. The Vybronics DC Motor draws 0mA when inactive and up to 60mA when running, making it the largest power consumer. The SunLED XDCBD14A display uses 0mA when off and 20mA when on. The total minimum power draw is 10mA, and the maximum draw is 90mA, which occurs when the motor is at full speed and the display is on. These values confirm that the system requires a 3.3V supply capable of delivering at least 100mA, with sufficient headroom for safe operation. The system is power-efficient, with the motor being the primary power consumer, and careful management can further reduce power use.</p> <p>Made: 2/25/2025</p> <p>Back to Home</p>"},{"location":"Block-Diagram/","title":"Block Diagram","text":""},{"location":"Block-Diagram/#description","title":"Description","text":"<p>Below is the block diagram for my individual subsystem,this subsytem recieves the signal for changing the wind speed and indicating what the wind speed is at.</p>"},{"location":"Block-Diagram/#diagram-last-edited-2252025","title":"Diagram (Last Edited: 2/25/2025)","text":""},{"location":"Block-Diagram/#how-it-meets-product-requirement-made-552025","title":"How it Meets Product Requirement (Made: 5/5/2025)","text":"<p>The block diagram was designed to meet the product requirements of reading and displaying fan speed, updating the display in real-time, and reporting the data to the input device board. The system is powered by a 12V power supply, which is regulated to 3.3V for the microcontroller and other components. The PIC18F47Q10 microcontroller receives fan speed data from the anemometer, decodes it, and sends it to the LED Driver via I2C. The LED Driver then controls the 7-segment display to show the fan speed.</p> <p>Real-time data is processed by the microcontroller, which communicates with the LED Driver to update the display immediately. The 3.3V switching regulator ensures proper voltage levels for all components. This design efficiently handles the reading, decoding, and displaying of fan speed while maintaining simple communication between the microcontroller, anemometer, and display system. The MPLAB SNAP interface is included for easy programming and debugging.</p> <p>Made: 1/31/2025</p> <p>Back to Home</p>"},{"location":"Component-Selection/","title":"Component Selection","text":"<p>This page documents my component selection process, including the options considered for each major subsystem and the reasoning behind my choices for supporting hardware. Due to project requirements, only surface-mount components will be considered.</p>"},{"location":"Component-Selection/#subsystem-functionality","title":"Subsystem Functionality","text":"<p>My role in our team's simulated wind tunnel project is to manage the airspeed display. The system includes a small airplane on a pivot with streamers to visualize airflow, along with a 7-segment display that indicates wind speed. The wind speed values are controlled by an operator using dials. To ensure seamless communication between subsystems, our team has chosen to use UART, forwarding messages with headers to identify their sources. Since response time is not critical, this approach should work as long as each microcontroller has enough data storage to queue and transmit the necessary information.</p>"},{"location":"Component-Selection/#microcontroller-selection-last-edited-552025","title":"Microcontroller Selection (Last Edited: 5/5/2025)","text":"Solution Image Pros Cons Datasheet Price PIC18F47Q10 TQFP/44 - High Memory  - Rich Peripherals  - Hardware CLC - Higher Power Consumption  - More Expensive  - More Complex to Program Datasheet $1.64 MC9S08PA32AVLCR - Efficient 8-bit Performance  - Integrated Peripherals  - Lower Cost - Limited Memory  - Slower Processing  - Limited Community Support Datasheet $2.86 ATTINY202-SSFR - Ultra Low Power  - Compact Package  - Simple Programming - Limited Memory  - Minimal Peripherals  - Lower Processing Datasheet $0.50 <p>Selection: I chose the PIC18F47Q10 (TQFP/44) for my airspeed display because its successful integration with other systems will largely determine the project's scope. The availability of both provided and sourced information will be crucial to the final system's functionality. Additionally, using the same microcontroller as other students provides access to a broader knowledge base, and the labs leading up to the final project will help refine my skills with this specific controller.</p>"},{"location":"Component-Selection/#anemometer-last-edited-552025","title":"Anemometer (Last Edited: 5/5/2025)","text":"<p>Explanation: Our team plans to build a custom anemometer for our project, designed to measure the speed of the fan in our wind tunnel. The component selection will include a motor which is needed for the anemometer, because we want the motor to be spinning from our provided wind speed so we can read the input and convert the motor readings to wind speed as the output.</p> Solution Image Pros Cons Datasheet Price VQ4TL2BQ380001 - High RPM  - Compact size  - Low voltage operation - Low torque  - No built-in gearing  - High RPM (Might require more circuitry to handle) Datasheet $4.04 ROB-11696 - Moderate RPM  - Reliable performance  - Suitable for general applications - May require higher wind speeds  - Higher voltage  - Slightly larger Datasheet $2.76 FIT0564 - Built-in gearbox increases torque  - Lower no-load RPM  - Can handle a wider range of applications - May not see changes in wind speed  - Larger size compared to other motors  - Requires more power Datasheet $9.90 <p>Selection: The Vybronics VQ4TL2BQ380001 motor was chosen because of its high RPM (24,927 RPM), which makes it highly responsive to changes in wind speed. Its compact size allows for easy integration into our anemometer design without adding unnecessary weight or bulk. Additionally, its low operating voltage (3VDC) ensures efficient power use while still generating a measurable voltage output for wind speed calculations.</p>"},{"location":"Component-Selection/#oled-last-edited-552025","title":"OLED (Last Edited: 5/5/2025)","text":"Solution Image Pros Cons Datasheet Price XDCBD14A - Bright Illumination  - Standard 10-DIP  - Moderate Power Consumption - Single-digit Display  - Common anode configuration may not be compatible with all driver circuits  - Limited viewing angle Datasheet $2.97 COM-13999 - RGB capability  - Dual-digit design  - Standard 14-DIP - Higher Power consumption  - More complex control circuitry  - Slightly larger footprint Datasheet $4.68 TDCR1050M - Four-digit display  - Compact design  - Low forward voltage - Smaller digit size  - Red illumination  - Common anode configuration Datasheet $3.34 <p>Selection: I chose the XDCBD14A for my airspeed display because its blue LED segments provide high visibility, ensuring that airspeed values are easy to read in various lighting conditions. The 0.56\" digit size offers a good balance between readability and compactness, making it a suitable choice for my system. Additionally, the common anode configuration allows for flexible interfacing with standard driver circuits.</p>"},{"location":"Component-Selection/#led-driver-last-edited-552025","title":"LED Driver (Last Edited: 5/5/2025)","text":"Solution Image Pros Cons Datasheet Price AS1115-BSST - Supports up to 8 digits  - Operates at 3.3V  - Simple I\u00b2C interface - Limited expandability beyond 8 digits  - Only supports I\u00b2C, no SPI option  - May require external resistors for LED current control Datasheet $4.21 MAX6958AAEE+T - Operates at 3.3V  - I\u00b2C-compatible  - Compact 16-QSOP package - Only supports up to 4 digits  - Limited segment outputs  - Less community support Datasheet $13.77 MAX6955AAX+ - Supports up to 16 digits  - 3.3V compatible  - I\u00b2C interface - Larger 36-SSOP package  - More complex setup for basic needs  - Higher power consumption Datasheet $31.18 <p>Selection: I chose the AS1115-BSST for my LED driver because it supports up to 8 digits, which meets my requirement of driving 4\u20135 XDCBD14A 7-segment displays. It operates at 3.3V, ensuring compatibility with my PIC18F47K40 microcontroller without additional voltage level shifting. The I\u00b2C interface simplifies communication, reducing the number of required microcontroller pins while maintaining efficient data transfer. Additionally, its compact design and built-in scanning capabilities make it an ideal choice for displaying real-time airspeed values from the anemometer in my wind tunnel project.</p>"},{"location":"Component-Selection/#major-components-summary-table-last-edited-552025","title":"Major Components Summary Table (Last Edited: 5/5/2025)","text":"Component Description Part Number Price Datasheet Microcontroller Central control for the system PIC18F47Q10 TQFP/44 $1.64 Datasheet Anemometer Motor Measures fan speed VQ4TL2BQ380001 $4.04 Datasheet 7-Segment Display Display airspeed readings XDCBD14A $2.97 Datasheet LED Driver Drives the 7-segment display AS1115-BSST $4.21 Datasheet <p>Made: 2/7/2025</p> <p>Back to Home</p>"},{"location":"Final-Report/","title":"Final Report","text":""},{"location":"Final-Report/#decision-making","title":"Decision Making","text":"<p>Our team\u2019s design and decision-making process began with exploring various project options, with a primary focus on ease of manufacturing and maximizing educational value. It was crucial for us to create a fun, engaging platform for students while ensuring the project remained achievable. We wanted to avoid overcomplicating the design to the point where meaningful progress would be difficult. Initially, we brainstormed as many ideas as possible and categorized them by the team members who suggested them. This approach ensured equal representation from everyone and allowed us to generate ideas without external influence. After compiling all ideas, we categorized them using useful identifiers to refine our selection. Ultimately, we selected the final idea through a voting process. Each team member chose ideas proposed by others and critiqued their own suggestions. After voting, we focused on aligning the selected ideas with our educational goals. This led us to choose a simulated wind tunnel as the final project, which we believed would effectively meet our educational objectives and remain feasible within the project\u2019s scope.</p>"},{"location":"Final-Report/#version-20-improvements","title":"Version 2.0 Improvements","text":"<p>If I were to create a \"Version 2.0\" of my hardware design, one of the first improvements I would focus on is reworking the 3.3V regulator. In the current version, the regulator didn't function as expected, which ultimately caused my entire system to fail. This issue was a major setback, as it prevented the system from operating at all, and I was unable to test or verify any other components of the design. The failure of the 3.3V regulator highlighted the critical importance of reliable power regulation, which is essential for the proper functioning of all components in the system. In a future iteration, I would make sure to thoroughly test and validate the regulator circuit before proceeding with the rest of the design.</p> <p>Additionally, I would focus on improving the overall design of the printed circuit board (PCB). This would involve ensuring proper trace widths, clear component placement, and careful routing to minimize noise and signal interference. Creating a more robust and reliable PCB layout would help avoid the issues I encountered with power distribution and ensure that all components are functioning as intended.</p> <p>Another key improvement would be incorporating more peer review and collaboration during the design and testing phases. In this version, I would involve more team members and experts to check my work at various stages of the project. By seeking feedback earlier in the process, I could identify potential flaws or design issues before they become significant problems. This collaborative approach would not only improve the quality of the final product but also reduce the likelihood of encountering unexpected failures during testing.</p> <p>Finally, I would invest more time in prototyping and iteration. Instead of finalizing the design too quickly, I would take the time to test each individual component before integrating it into the full system. By ensuring that each part of the system works as expected in isolation, I could avoid the cascading failures that occurred due to the initial power supply issue. This more methodical approach would ultimately lead to a more reliable and functional system for the next version of the project.</p>"},{"location":"Schematic/","title":"Schematic and PCB","text":""},{"location":"Schematic/#description","title":"Description","text":"<p>This schematic represents the individual board design based on our team's assigned block diagram. The design integrates a PIC18F46K40-I/PT microcontroller with key peripherals, enabling efficient data processing and communication.</p>"},{"location":"Schematic/#schematic-last-updated552025","title":"Schematic (Last Updated:5/5/2025)","text":""},{"location":"Schematic/#functionality","title":"Functionality","text":"<p>The schematic effectively meets the user needs and product requirements by integrating key components for real-time airspeed measurement and display. The PIC18F47Q10 microcontroller processes data from the anemometer, controlling the LED driver (AS1115-BSST) to update the 7-segment display with airspeed values. The 3.3V regulator ensures stable power for the system, converting the 12V input to the required 3.3V, which is essential for efficient operation. The MPLAB SNAP interface allows for programming and debugging, ensuring smooth development and testing.</p> <p>The anemometer provides accurate data on the fan speed, which is processed by the microcontroller and displayed on the 7-segment display. The LED driver ensures the display is clear and visible, meeting the requirement for real-time monitoring of airspeed. Overall, the schematic design provides efficient power management, clear data presentation, and flexibility for future modifications, fully supporting the functionality of the wind tunnel airspeed measurement system.</p>"},{"location":"Schematic/#pcb-last-updated552025","title":"PCB (Last Updated:5/5/2025)","text":"<p>Made: 2/21/2025</p> <p>Back to Home</p>"},{"location":"pic-table/","title":"PIC Table","text":"ESP Info Answer Model PIC18F47Q10 Product Page URL link Datasheet URL(s) link Application Notes URL(s) link Vendor link link Code Examples link External Resources URL(s) link Unit cost $1.64 Absolute Maximum Current for entire IC 185 mA Supply Voltage Range 1.8V / 3.3V / 5.5V / 5.5V Absolute Maximum current (for entire IC) 185 mA Maximum GPIO current (per pin) 25 mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL Curiosity Nano Board, $15, link Works with MPLabX? Yes Works with Microchip Code Configurator? Yes Module # Available Needed Associated Pins (or * for any) GPIO 36 ~10 * ADC 35 channels 1\u20132 ANx pins (e.g., RA0, RA1, etc.) UART 2 (EUSART) 1 TX1/RX1 (RC6/RC7), TX2/RX2 (RB6/RB7) SPI 1 (MSSP) 1 SDO/SCK/SDI (e.g., RC3, RC4, RC5) I2C 1 (MSSP) 1 SDA/SCL (e.g., RC3, RC4) PWM 6 (CCP/CLC) 1\u20132 CCPx (e.g., RC2, RC1, RB3, etc.) ICSP 1 1 PGD/PGC (RA0/RA1 or RB6/RB7 depending on setup) <p>Made: 5/5/2025</p> <p>Back to Home</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}